{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ckvar\\\\OneDrive\\\\Desktop\\\\CHirag\\\\generative-min\\\\src\\\\context\\\\User.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { injected } from 'src/connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport { mintAddress, ACTIVE_NETWORK } from 'src/constants';\nimport RezwanPodABI from 'src/constants/ABI/RezwanPodABI.json';\nimport axios from 'axios';\nimport { getWeb3ContractObject, getWeb3Obj, getBalanceOf, getContract } from 'src/utils';\nimport { toast } from 'react-toastify';\nexport const UserContext = createContext();\n\nconst setSession = userAddress => {\n  if (userAddress) {\n    sessionStorage.setItem('userAddress', userAddress);\n  } else {\n    sessionStorage.removeItem('userAddress');\n  }\n};\n\nexport default function AuthProvider(props) {\n  const {\n    activate,\n    account,\n    library,\n    chainId\n  } = useWeb3React();\n  const [adminWalletAddress, setAdminWalletAddress] = useState('');\n  const [hasFinalSaleStarted, setHasFinalSaleStarted] = useState(true);\n  const [MAX_NFT_SUPPLY, setMAX_NFT_SUPPLY] = useState(0);\n  const [nftPrice, setNftPrice] = useState(0);\n  const [balanceOfValue, setBalanceOfValue] = useState(0);\n  const [mintPercentage, setMintPercentage] = useState(0);\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const [userNFTList, setUserNFTList] = useState([]);\n  const [isLoadingAllNFT, setIsLoadingAllNFT] = useState(false);\n  const [allNftList, setallNftList] = useState([]);\n  const [userNFtLoading, setUserNftLoading] = useState(false);\n  const [saleActive, setSaleActive] = useState(0);\n  const [MAX_NFT_CAP, setMAX_NFT_CAP] = useState(0);\n  const [MAX_NFT_WALLET, setMAX_NFT_WALLET] = useState(0);\n\n  const getContractDetailsHandler = async () => {\n    try {\n      setIsLoadingData(true);\n      const web3 = await getWeb3Obj();\n      const contractObj = await getWeb3ContractObject(RezwanPodABI, mintAddress);\n      const adminAccount = await contractObj.methods.owner().call();\n      setAdminWalletAddress(adminAccount);\n      const MAX_NFT_CAPL = await contractObj.methods.MAX_NFT_CAP().call();\n      setMAX_NFT_CAP(MAX_NFT_CAPL);\n      const MAX_NFT_WALLETL = await contractObj.methods.MAX_NFT_WALLET().call();\n      setMAX_NFT_WALLET(MAX_NFT_WALLETL);\n      const saleActiveL = await contractObj.methods.saleActive().call();\n      setSaleActive(saleActiveL);\n\n      if (saleActiveL == 0) {\n        setNftPrice(0);\n        setHasFinalSaleStarted(false);\n      }\n\n      if (saleActiveL == 1 || saleActiveL == 2 || saleActiveL == 3) {\n        const salePrice = await contractObj.methods.PRESALE_NFT_PRICE().call();\n        setNftPrice(web3.utils.fromWei(salePrice));\n      }\n\n      if (saleActiveL == 4) {\n        const salePrice = await contractObj.methods.PUBLICSALE_NFT_PRICE().call();\n        setNftPrice(web3.utils.fromWei(salePrice));\n      }\n\n      setIsLoadingData(false);\n    } catch (err) {\n      console.log(err);\n      setIsLoadingData(false);\n    }\n  };\n\n  const getCurrentMintingDetails = async () => {\n    const contractObj = await getWeb3ContractObject(RezwanPodABI, mintAddress);\n\n    if (account) {\n      getBalanceOfFun();\n    }\n\n    const MAX_NFT_SUPPLY = await contractObj.methods.MAX_NFT_SUPPLY().call();\n    setMAX_NFT_SUPPLY(Number(MAX_NFT_SUPPLY));\n    const totalSupply = await contractObj.methods.totalSupply().call();\n    setTotalSupply(Number(totalSupply));\n    let per = parseFloat(totalSupply) / parseFloat(MAX_NFT_SUPPLY) * 100;\n    setMintPercentage(per);\n  };\n\n  const userNFTListHadler = async (balanceOf, cancelTokenSource) => {\n    setUserNFTList([]);\n    setUserNftLoading(true);\n    const contract = getContract(mintAddress, RezwanPodABI, library, account);\n\n    try {\n      for (let i = 0; i < balanceOf; i++) {\n        const id = await contract.tokenOfOwnerByIndex(account, i);\n        const filter = await contract.tokenURI(id.toString());\n        const res = await axios.get(filter, {\n          cancelToken: cancelTokenSource && cancelTokenSource.token\n        });\n\n        if (res.status === 200) {\n          setUserNFTList(prev => [...prev, {\n            id: id.toString(),\n            nfdData: res.data\n          }]);\n          setUserNftLoading(false);\n        }\n      }\n    } catch (e) {\n      console.log(e);\n      setUserNftLoading(false);\n    }\n  };\n\n  const allNFTListHandler = async (txaCount, cancelTokenSource) => {\n    //eslint-disable-line no-unused-vars\n    setIsLoadingAllNFT(true);\n    const contract = await getWeb3ContractObject(RezwanPodABI, mintAddress);\n\n    try {\n      for (let i = 0; i < parseInt(txaCount); i++) {\n        try {\n          const tokenURI = await contract.methods.tokenURI(i.toString()).call();\n          const res = await axios.get(tokenURI);\n\n          if (res.status === 200) {\n            setallNftList(prev => [...prev, {\n              id: i.toString(),\n              nfdData: res.data\n            }]);\n          }\n        } catch (error) {\n          console.log('ERROR', error);\n        }\n      }\n\n      setIsLoadingAllNFT(false);\n    } catch (error) {\n      setIsLoadingAllNFT(false);\n      console.log('ERROR', error);\n    }\n  };\n\n  useEffect(() => {\n    const cancelTokenSource = axios.CancelToken.source();\n\n    if (totalSupply > 0) {\n      allNFTListHandler(totalSupply, cancelTokenSource);\n    }\n  }, [totalSupply]);\n  useEffect(() => {\n    const cancelTokenSource = axios.CancelToken.source();\n\n    if (balanceOfValue > 0) {\n      userNFTListHadler(balanceOfValue, cancelTokenSource);\n    }\n\n    return () => {\n      cancelTokenSource.cancel();\n    };\n  }, [balanceOfValue, account]);\n  useEffect(() => {\n    getContractDetailsHandler();\n    getCurrentMintingDetails();\n  }, []);\n  useEffect(() => {\n    if (account) {\n      getBalanceOfFun();\n    }\n  }, [account]); //eslint-disable-line\n\n  async function getBalanceOfFun() {\n    setBalanceOfValue(await getBalanceOf(RezwanPodABI, mintAddress, account));\n  }\n\n  let data = {\n    nftPrice,\n    saleActive,\n    MAX_NFT_CAP,\n    hasFinalSaleStarted,\n    adminWalletAddress,\n    balanceOfValue,\n    MAX_NFT_WALLET,\n    MAX_NFT_SUPPLY,\n    mintPercentage,\n    totalSupply,\n    isLoadingData,\n    userNFTList,\n    allNftList,\n    userNFtLoading,\n    isLoadingAllNFT,\n    updateUser: account => {\n      setSession(account);\n    },\n    connectWallet: () => connectToWallet(),\n    getCurrentMintingDetails: () => getCurrentMintingDetails()\n  };\n\n  const connectToWallet = data => {\n    var _connector$walletConn, _connector$walletConn2;\n\n    const connector = injected;\n    window.sessionStorage.removeItem('walletName');\n    window.sessionStorage.setItem('walletName', 'METAMASK'); // setErrorMsg(\"\");\n    // setSuccessMSG(\"\");\n\n    if (connector && ((_connector$walletConn = connector.walletConnectProvider) === null || _connector$walletConn === void 0 ? void 0 : (_connector$walletConn2 = _connector$walletConn.wc) === null || _connector$walletConn2 === void 0 ? void 0 : _connector$walletConn2.uri)) {\n      connector.walletConnectProvider = undefined;\n    }\n\n    activate(connector, undefined, true).catch(error => {\n      if (error) {\n        console.log('error', error.message); // setErrorMsg(error.message + \" Please install \" + data.name);\n\n        activate(connector); // setIsLoading(false);\n        // setErrorPop(true);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (account && chainId) {\n      if (chainId !== ACTIVE_NETWORK) {\n        if (window.ethereum) {\n          swichNetworkHandler();\n        }\n      }\n    }\n  }, [chainId, account]);\n\n  const swichNetworkHandler = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x' + ACTIVE_NETWORK.toString(16)\n        }]\n      });\n    } catch (error) {\n      console.log('ERROR', error);\n      toast.warn(error.message); // if (error.code === 4902) {\n      //   addNetworkHandler();\n      // }\n    }\n  };\n\n  useEffect(() => {\n    const userAddress = window.sessionStorage.getItem('userAddress');\n\n    if (userAddress) {\n      data.connectWallet();\n    }\n  }, []); //eslint-disable-line\n\n  useEffect(() => {\n    data.updateUser(account);\n  }, [account]); //eslint-disable-line\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/ckvar/OneDrive/Desktop/CHirag/generative-min/src/context/User.js"],"names":["React","createContext","useEffect","useState","injected","useWeb3React","mintAddress","ACTIVE_NETWORK","RezwanPodABI","axios","getWeb3ContractObject","getWeb3Obj","getBalanceOf","getContract","toast","UserContext","setSession","userAddress","sessionStorage","setItem","removeItem","AuthProvider","props","activate","account","library","chainId","adminWalletAddress","setAdminWalletAddress","hasFinalSaleStarted","setHasFinalSaleStarted","MAX_NFT_SUPPLY","setMAX_NFT_SUPPLY","nftPrice","setNftPrice","balanceOfValue","setBalanceOfValue","mintPercentage","setMintPercentage","totalSupply","setTotalSupply","isLoadingData","setIsLoadingData","userNFTList","setUserNFTList","isLoadingAllNFT","setIsLoadingAllNFT","allNftList","setallNftList","userNFtLoading","setUserNftLoading","saleActive","setSaleActive","MAX_NFT_CAP","setMAX_NFT_CAP","MAX_NFT_WALLET","setMAX_NFT_WALLET","getContractDetailsHandler","web3","contractObj","adminAccount","methods","owner","call","MAX_NFT_CAPL","MAX_NFT_WALLETL","saleActiveL","salePrice","PRESALE_NFT_PRICE","utils","fromWei","PUBLICSALE_NFT_PRICE","err","console","log","getCurrentMintingDetails","getBalanceOfFun","Number","per","parseFloat","userNFTListHadler","balanceOf","cancelTokenSource","contract","i","id","tokenOfOwnerByIndex","filter","tokenURI","toString","res","get","cancelToken","token","status","prev","nfdData","data","e","allNFTListHandler","txaCount","parseInt","error","CancelToken","source","cancel","updateUser","connectWallet","connectToWallet","connector","window","walletConnectProvider","wc","uri","undefined","catch","message","ethereum","swichNetworkHandler","request","method","params","warn","getItem","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,eAA5C;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,qBADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,WAJF,QAKO,WALP;AAMA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,MAAMC,WAAW,GAAGd,aAAa,EAAjC;;AAEP,MAAMe,UAAU,GAAIC,WAAD,IAAiB;AAClC,MAAIA,WAAJ,EAAiB;AACfC,IAAAA,cAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsCF,WAAtC;AACD,GAFD,MAEO;AACLC,IAAAA,cAAc,CAACE,UAAf,CAA0B,aAA1B;AACD;AACF,CAND;;AAQA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA;AAA9B,MAA0CrB,YAAY,EAA5D;AACA,QAAM,CAACsB,kBAAD,EAAqBC,qBAArB,IAA8CzB,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAC0B,mBAAD,EAAsBC,sBAAtB,IAAgD3B,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAM,CAAC4B,cAAD,EAAiBC,iBAAjB,IAAsC7B,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAAC8B,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACgC,cAAD,EAAiBC,iBAAjB,IAAsCjC,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACkC,cAAD,EAAiBC,iBAAjB,IAAsCnC,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACoC,WAAD,EAAcC,cAAd,IAAgCrC,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACsC,aAAD,EAAgBC,gBAAhB,IAAoCvC,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACwC,WAAD,EAAcC,cAAd,IAAgCzC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC0C,eAAD,EAAkBC,kBAAlB,IAAwC3C,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAAC4C,UAAD,EAAaC,aAAb,IAA8B7C,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC8C,cAAD,EAAiBC,iBAAjB,IAAsC/C,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACgD,UAAD,EAAaC,aAAb,IAA8BjD,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACkD,WAAD,EAAcC,cAAd,IAAgCnD,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACoD,cAAD,EAAiBC,iBAAjB,IAAsCrD,QAAQ,CAAC,CAAD,CAApD;;AAEA,QAAMsD,yBAAyB,GAAG,YAAY;AAC5C,QAAI;AACFf,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,YAAMgB,IAAI,GAAG,MAAM/C,UAAU,EAA7B;AACA,YAAMgD,WAAW,GAAG,MAAMjD,qBAAqB,CAACF,YAAD,EAAeF,WAAf,CAA/C;AACA,YAAMsD,YAAY,GAAG,MAAMD,WAAW,CAACE,OAAZ,CAAoBC,KAApB,GAA4BC,IAA5B,EAA3B;AACAnC,MAAAA,qBAAqB,CAACgC,YAAD,CAArB;AACA,YAAMI,YAAY,GAAG,MAAML,WAAW,CAACE,OAAZ,CAAoBR,WAApB,GAAkCU,IAAlC,EAA3B;AACAT,MAAAA,cAAc,CAACU,YAAD,CAAd;AACA,YAAMC,eAAe,GAAG,MAAMN,WAAW,CAACE,OAAZ,CAAoBN,cAApB,GAAqCQ,IAArC,EAA9B;AACAP,MAAAA,iBAAiB,CAACS,eAAD,CAAjB;AACA,YAAMC,WAAW,GAAG,MAAMP,WAAW,CAACE,OAAZ,CAAoBV,UAApB,GAAiCY,IAAjC,EAA1B;AACAX,MAAAA,aAAa,CAACc,WAAD,CAAb;;AACA,UAAIA,WAAW,IAAI,CAAnB,EAAsB;AACpBhC,QAAAA,WAAW,CAAC,CAAD,CAAX;AACAJ,QAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD;;AACD,UAAIoC,WAAW,IAAI,CAAf,IAAoBA,WAAW,IAAI,CAAnC,IAAwCA,WAAW,IAAI,CAA3D,EAA8D;AAC5D,cAAMC,SAAS,GAAG,MAAMR,WAAW,CAACE,OAAZ,CAAoBO,iBAApB,GAAwCL,IAAxC,EAAxB;AACA7B,QAAAA,WAAW,CAACwB,IAAI,CAACW,KAAL,CAAWC,OAAX,CAAmBH,SAAnB,CAAD,CAAX;AACD;;AACD,UAAID,WAAW,IAAI,CAAnB,EAAsB;AACpB,cAAMC,SAAS,GAAG,MAAMR,WAAW,CAACE,OAAZ,CACrBU,oBADqB,GAErBR,IAFqB,EAAxB;AAGA7B,QAAAA,WAAW,CAACwB,IAAI,CAACW,KAAL,CAAWC,OAAX,CAAmBH,SAAnB,CAAD,CAAX;AACD;;AACDzB,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,KA3BD,CA2BE,OAAO8B,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA9B,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,GAhCD;;AAiCA,QAAMiC,wBAAwB,GAAG,YAAY;AAC3C,UAAMhB,WAAW,GAAG,MAAMjD,qBAAqB,CAACF,YAAD,EAAeF,WAAf,CAA/C;;AACA,QAAIkB,OAAJ,EAAa;AACXoD,MAAAA,eAAe;AAChB;;AACD,UAAM7C,cAAc,GAAG,MAAM4B,WAAW,CAACE,OAAZ,CAAoB9B,cAApB,GAAqCgC,IAArC,EAA7B;AACA/B,IAAAA,iBAAiB,CAAC6C,MAAM,CAAC9C,cAAD,CAAP,CAAjB;AACA,UAAMQ,WAAW,GAAG,MAAMoB,WAAW,CAACE,OAAZ,CAAoBtB,WAApB,GAAkCwB,IAAlC,EAA1B;AACAvB,IAAAA,cAAc,CAACqC,MAAM,CAACtC,WAAD,CAAP,CAAd;AACA,QAAIuC,GAAG,GAAIC,UAAU,CAACxC,WAAD,CAAV,GAA0BwC,UAAU,CAAChD,cAAD,CAArC,GAAyD,GAAnE;AACAO,IAAAA,iBAAiB,CAACwC,GAAD,CAAjB;AACD,GAXD;;AAaA,QAAME,iBAAiB,GAAG,OAAOC,SAAP,EAAkBC,iBAAlB,KAAwC;AAChEtC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAM,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA,UAAMiC,QAAQ,GAAGtE,WAAW,CAACP,WAAD,EAAcE,YAAd,EAA4BiB,OAA5B,EAAqCD,OAArC,CAA5B;;AAEA,QAAI;AACF,WAAK,IAAI4D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC,cAAMC,EAAE,GAAG,MAAMF,QAAQ,CAACG,mBAAT,CAA6B9D,OAA7B,EAAsC4D,CAAtC,CAAjB;AACA,cAAMG,MAAM,GAAG,MAAMJ,QAAQ,CAACK,QAAT,CAAkBH,EAAE,CAACI,QAAH,EAAlB,CAArB;AAEA,cAAMC,GAAG,GAAG,MAAMjF,KAAK,CAACkF,GAAN,CAAUJ,MAAV,EAAkB;AAClCK,UAAAA,WAAW,EAAEV,iBAAiB,IAAIA,iBAAiB,CAACW;AADlB,SAAlB,CAAlB;;AAGA,YAAIH,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACtBlD,UAAAA,cAAc,CAAEmD,IAAD,IAAU,CACvB,GAAGA,IADoB,EAEvB;AAAEV,YAAAA,EAAE,EAAEA,EAAE,CAACI,QAAH,EAAN;AAAqBO,YAAAA,OAAO,EAAEN,GAAG,CAACO;AAAlC,WAFuB,CAAX,CAAd;AAIA/C,UAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF;AACF,KAhBD,CAgBE,OAAOgD,CAAP,EAAU;AACVzB,MAAAA,OAAO,CAACC,GAAR,CAAYwB,CAAZ;AACAhD,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF,GAzBD;;AA2BA,QAAMiD,iBAAiB,GAAG,OAAOC,QAAP,EAAiBlB,iBAAjB,KAAuC;AAC/D;AACApC,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA,UAAMqC,QAAQ,GAAG,MAAMzE,qBAAqB,CAACF,YAAD,EAAeF,WAAf,CAA5C;;AACA,QAAI;AACF,WAAK,IAAI8E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,QAAQ,CAACD,QAAD,CAA5B,EAAwChB,CAAC,EAAzC,EAA6C;AAC3C,YAAI;AACF,gBAAMI,QAAQ,GAAG,MAAML,QAAQ,CAACtB,OAAT,CAAiB2B,QAAjB,CAA0BJ,CAAC,CAACK,QAAF,EAA1B,EAAwC1B,IAAxC,EAAvB;AACA,gBAAM2B,GAAG,GAAG,MAAMjF,KAAK,CAACkF,GAAN,CAAUH,QAAV,CAAlB;;AACA,cAAIE,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACtB9C,YAAAA,aAAa,CAAE+C,IAAD,IAAU,CACtB,GAAGA,IADmB,EAEtB;AAAEV,cAAAA,EAAE,EAAED,CAAC,CAACK,QAAF,EAAN;AAAoBO,cAAAA,OAAO,EAAEN,GAAG,CAACO;AAAjC,aAFsB,CAAX,CAAb;AAID;AACF,SATD,CASE,OAAOK,KAAP,EAAc;AACd7B,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB4B,KAArB;AACD;AACF;;AAEDxD,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,KAjBD,CAiBE,OAAOwD,KAAP,EAAc;AACdxD,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEA2B,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB4B,KAArB;AACD;AACF,GA1BD;;AA2BApG,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgF,iBAAiB,GAAGzE,KAAK,CAAC8F,WAAN,CAAkBC,MAAlB,EAA1B;;AACA,QAAIjE,WAAW,GAAG,CAAlB,EAAqB;AACnB4D,MAAAA,iBAAiB,CAAC5D,WAAD,EAAc2C,iBAAd,CAAjB;AACD;AACF,GALQ,EAKN,CAAC3C,WAAD,CALM,CAAT;AAMArC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgF,iBAAiB,GAAGzE,KAAK,CAAC8F,WAAN,CAAkBC,MAAlB,EAA1B;;AAEA,QAAIrE,cAAc,GAAG,CAArB,EAAwB;AACtB6C,MAAAA,iBAAiB,CAAC7C,cAAD,EAAiB+C,iBAAjB,CAAjB;AACD;;AACD,WAAO,MAAM;AACXA,MAAAA,iBAAiB,CAACuB,MAAlB;AACD,KAFD;AAGD,GATQ,EASN,CAACtE,cAAD,EAAiBX,OAAjB,CATM,CAAT;AAWAtB,EAAAA,SAAS,CAAC,MAAM;AACduD,IAAAA,yBAAyB;AACzBkB,IAAAA,wBAAwB;AACzB,GAHQ,EAGN,EAHM,CAAT;AAKAzE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,OAAJ,EAAa;AACXoD,MAAAA,eAAe;AAChB;AACF,GAJQ,EAIN,CAACpD,OAAD,CAJM,CAAT,CA5I0C,CAgJ5B;;AAEd,iBAAeoD,eAAf,GAAiC;AAC/BxC,IAAAA,iBAAiB,CAAC,MAAMxB,YAAY,CAACJ,YAAD,EAAeF,WAAf,EAA4BkB,OAA5B,CAAnB,CAAjB;AACD;;AAED,MAAIyE,IAAI,GAAG;AACThE,IAAAA,QADS;AAETkB,IAAAA,UAFS;AAGTE,IAAAA,WAHS;AAITxB,IAAAA,mBAJS;AAKTF,IAAAA,kBALS;AAMTQ,IAAAA,cANS;AAOToB,IAAAA,cAPS;AAQTxB,IAAAA,cARS;AASTM,IAAAA,cATS;AAUTE,IAAAA,WAVS;AAWTE,IAAAA,aAXS;AAYTE,IAAAA,WAZS;AAaTI,IAAAA,UAbS;AAcTE,IAAAA,cAdS;AAeTJ,IAAAA,eAfS;AAiBT6D,IAAAA,UAAU,EAAGlF,OAAD,IAAa;AACvBR,MAAAA,UAAU,CAACQ,OAAD,CAAV;AACD,KAnBQ;AAoBTmF,IAAAA,aAAa,EAAE,MAAMC,eAAe,EApB3B;AAqBTjC,IAAAA,wBAAwB,EAAE,MAAMA,wBAAwB;AArB/C,GAAX;;AAuBA,QAAMiC,eAAe,GAAIX,IAAD,IAAU;AAAA;;AAChC,UAAMY,SAAS,GAAGzG,QAAlB;AACA0G,IAAAA,MAAM,CAAC5F,cAAP,CAAsBE,UAAtB,CAAiC,YAAjC;AACA0F,IAAAA,MAAM,CAAC5F,cAAP,CAAsBC,OAAtB,CAA8B,YAA9B,EAA4C,UAA5C,EAHgC,CAIhC;AACA;;AACA,QAAI0F,SAAS,8BAAIA,SAAS,CAACE,qBAAd,oFAAI,sBAAiCC,EAArC,2DAAI,uBAAqCC,GAAzC,CAAb,EAA2D;AACzDJ,MAAAA,SAAS,CAACE,qBAAV,GAAkCG,SAAlC;AACD;;AACD3F,IAAAA,QAAQ,CAACsF,SAAD,EAAYK,SAAZ,EAAuB,IAAvB,CAAR,CAAqCC,KAArC,CAA4Cb,KAAD,IAAW;AACpD,UAAIA,KAAJ,EAAW;AACT7B,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB4B,KAAK,CAACc,OAA3B,EADS,CAET;;AACA7F,QAAAA,QAAQ,CAACsF,SAAD,CAAR,CAHS,CAIT;AACA;AACD;AACF,KARD;AASD,GAlBD;;AAmBA3G,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,OAAO,IAAIE,OAAf,EAAwB;AACtB,UAAIA,OAAO,KAAKnB,cAAhB,EAAgC;AAC9B,YAAIuG,MAAM,CAACO,QAAX,EAAqB;AACnBC,UAAAA,mBAAmB;AACpB;AACF;AACF;AACF,GARQ,EAQN,CAAC5F,OAAD,EAAUF,OAAV,CARM,CAAT;;AASA,QAAM8F,mBAAmB,GAAG,YAAY;AACtC,QAAI;AACF,YAAMR,MAAM,CAACO,QAAP,CAAgBE,OAAhB,CAAwB;AAC5BC,QAAAA,MAAM,EAAE,4BADoB;AAE5BC,QAAAA,MAAM,EAAE,CAAC;AAAE/F,UAAAA,OAAO,EAAE,OAAOnB,cAAc,CAACkF,QAAf,CAAwB,EAAxB;AAAlB,SAAD;AAFoB,OAAxB,CAAN;AAID,KALD,CAKE,OAAOa,KAAP,EAAc;AACd7B,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB4B,KAArB;AAEAxF,MAAAA,KAAK,CAAC4G,IAAN,CAAWpB,KAAK,CAACc,OAAjB,EAHc,CAId;AACA;AACA;AACD;AACF,GAdD;;AAeAlH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,WAAW,GAAG6F,MAAM,CAAC5F,cAAP,CAAsByG,OAAtB,CAA8B,aAA9B,CAApB;;AACA,QAAI1G,WAAJ,EAAiB;AACfgF,MAAAA,IAAI,CAACU,aAAL;AACD;AACF,GALQ,EAKN,EALM,CAAT,CAxN0C,CA6NnC;;AAEPzG,EAAAA,SAAS,CAAC,MAAM;AACd+F,IAAAA,IAAI,CAACS,UAAL,CAAgBlF,OAAhB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT,CA/N0C,CAiO5B;;AAEd,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEyE,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoC3E,KAAK,CAACsG,QAA1C,CADF;AAGD","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport { injected } from 'src/connectors'\nimport { useWeb3React } from '@web3-react/core'\nimport { mintAddress, ACTIVE_NETWORK } from 'src/constants'\nimport RezwanPodABI from 'src/constants/ABI/RezwanPodABI.json'\nimport axios from 'axios'\nimport {\n  getWeb3ContractObject,\n  getWeb3Obj,\n  getBalanceOf,\n  getContract,\n} from 'src/utils'\nimport { toast } from 'react-toastify'\nexport const UserContext = createContext()\n\nconst setSession = (userAddress) => {\n  if (userAddress) {\n    sessionStorage.setItem('userAddress', userAddress)\n  } else {\n    sessionStorage.removeItem('userAddress')\n  }\n}\n\nexport default function AuthProvider(props) {\n  const { activate, account, library, chainId } = useWeb3React()\n  const [adminWalletAddress, setAdminWalletAddress] = useState('')\n  const [hasFinalSaleStarted, setHasFinalSaleStarted] = useState(true)\n  const [MAX_NFT_SUPPLY, setMAX_NFT_SUPPLY] = useState(0)\n  const [nftPrice, setNftPrice] = useState(0)\n  const [balanceOfValue, setBalanceOfValue] = useState(0)\n  const [mintPercentage, setMintPercentage] = useState(0)\n  const [totalSupply, setTotalSupply] = useState(0)\n  const [isLoadingData, setIsLoadingData] = useState(true)\n  const [userNFTList, setUserNFTList] = useState([])\n  const [isLoadingAllNFT, setIsLoadingAllNFT] = useState(false)\n  const [allNftList, setallNftList] = useState([])\n  const [userNFtLoading, setUserNftLoading] = useState(false)\n  const [saleActive, setSaleActive] = useState(0)\n  const [MAX_NFT_CAP, setMAX_NFT_CAP] = useState(0)\n  const [MAX_NFT_WALLET, setMAX_NFT_WALLET] = useState(0)\n\n  const getContractDetailsHandler = async () => {\n    try {\n      setIsLoadingData(true)\n      const web3 = await getWeb3Obj()\n      const contractObj = await getWeb3ContractObject(RezwanPodABI, mintAddress)\n      const adminAccount = await contractObj.methods.owner().call()\n      setAdminWalletAddress(adminAccount)\n      const MAX_NFT_CAPL = await contractObj.methods.MAX_NFT_CAP().call()\n      setMAX_NFT_CAP(MAX_NFT_CAPL)\n      const MAX_NFT_WALLETL = await contractObj.methods.MAX_NFT_WALLET().call()\n      setMAX_NFT_WALLET(MAX_NFT_WALLETL)\n      const saleActiveL = await contractObj.methods.saleActive().call()\n      setSaleActive(saleActiveL)\n      if (saleActiveL == 0) {\n        setNftPrice(0)\n        setHasFinalSaleStarted(false)\n      }\n      if (saleActiveL == 1 || saleActiveL == 2 || saleActiveL == 3) {\n        const salePrice = await contractObj.methods.PRESALE_NFT_PRICE().call()\n        setNftPrice(web3.utils.fromWei(salePrice))\n      }\n      if (saleActiveL == 4) {\n        const salePrice = await contractObj.methods\n          .PUBLICSALE_NFT_PRICE()\n          .call()\n        setNftPrice(web3.utils.fromWei(salePrice))\n      }\n      setIsLoadingData(false)\n    } catch (err) {\n      console.log(err)\n      setIsLoadingData(false)\n    }\n  }\n  const getCurrentMintingDetails = async () => {\n    const contractObj = await getWeb3ContractObject(RezwanPodABI, mintAddress)\n    if (account) {\n      getBalanceOfFun()\n    }\n    const MAX_NFT_SUPPLY = await contractObj.methods.MAX_NFT_SUPPLY().call()\n    setMAX_NFT_SUPPLY(Number(MAX_NFT_SUPPLY))\n    const totalSupply = await contractObj.methods.totalSupply().call()\n    setTotalSupply(Number(totalSupply))\n    let per = (parseFloat(totalSupply) / parseFloat(MAX_NFT_SUPPLY)) * 100\n    setMintPercentage(per)\n  }\n\n  const userNFTListHadler = async (balanceOf, cancelTokenSource) => {\n    setUserNFTList([])\n    setUserNftLoading(true)\n    const contract = getContract(mintAddress, RezwanPodABI, library, account)\n\n    try {\n      for (let i = 0; i < balanceOf; i++) {\n        const id = await contract.tokenOfOwnerByIndex(account, i)\n        const filter = await contract.tokenURI(id.toString())\n\n        const res = await axios.get(filter, {\n          cancelToken: cancelTokenSource && cancelTokenSource.token,\n        })\n        if (res.status === 200) {\n          setUserNFTList((prev) => [\n            ...prev,\n            { id: id.toString(), nfdData: res.data },\n          ])\n          setUserNftLoading(false)\n        }\n      }\n    } catch (e) {\n      console.log(e)\n      setUserNftLoading(false)\n    }\n  }\n\n  const allNFTListHandler = async (txaCount, cancelTokenSource) => {\n    //eslint-disable-line no-unused-vars\n    setIsLoadingAllNFT(true)\n    const contract = await getWeb3ContractObject(RezwanPodABI, mintAddress)\n    try {\n      for (let i = 0; i < parseInt(txaCount); i++) {\n        try {\n          const tokenURI = await contract.methods.tokenURI(i.toString()).call()\n          const res = await axios.get(tokenURI)\n          if (res.status === 200) {\n            setallNftList((prev) => [\n              ...prev,\n              { id: i.toString(), nfdData: res.data },\n            ])\n          }\n        } catch (error) {\n          console.log('ERROR', error)\n        }\n      }\n\n      setIsLoadingAllNFT(false)\n    } catch (error) {\n      setIsLoadingAllNFT(false)\n\n      console.log('ERROR', error)\n    }\n  }\n  useEffect(() => {\n    const cancelTokenSource = axios.CancelToken.source()\n    if (totalSupply > 0) {\n      allNFTListHandler(totalSupply, cancelTokenSource)\n    }\n  }, [totalSupply])\n  useEffect(() => {\n    const cancelTokenSource = axios.CancelToken.source()\n\n    if (balanceOfValue > 0) {\n      userNFTListHadler(balanceOfValue, cancelTokenSource)\n    }\n    return () => {\n      cancelTokenSource.cancel()\n    }\n  }, [balanceOfValue, account])\n\n  useEffect(() => {\n    getContractDetailsHandler()\n    getCurrentMintingDetails()\n  }, [])\n\n  useEffect(() => {\n    if (account) {\n      getBalanceOfFun()\n    }\n  }, [account]) //eslint-disable-line\n\n  async function getBalanceOfFun() {\n    setBalanceOfValue(await getBalanceOf(RezwanPodABI, mintAddress, account))\n  }\n\n  let data = {\n    nftPrice,\n    saleActive,\n    MAX_NFT_CAP,\n    hasFinalSaleStarted,\n    adminWalletAddress,\n    balanceOfValue,\n    MAX_NFT_WALLET,\n    MAX_NFT_SUPPLY,\n    mintPercentage,\n    totalSupply,\n    isLoadingData,\n    userNFTList,\n    allNftList,\n    userNFtLoading,\n    isLoadingAllNFT,\n\n    updateUser: (account) => {\n      setSession(account)\n    },\n    connectWallet: () => connectToWallet(),\n    getCurrentMintingDetails: () => getCurrentMintingDetails(),\n  }\n  const connectToWallet = (data) => {\n    const connector = injected\n    window.sessionStorage.removeItem('walletName')\n    window.sessionStorage.setItem('walletName', 'METAMASK')\n    // setErrorMsg(\"\");\n    // setSuccessMSG(\"\");\n    if (connector && connector.walletConnectProvider?.wc?.uri) {\n      connector.walletConnectProvider = undefined\n    }\n    activate(connector, undefined, true).catch((error) => {\n      if (error) {\n        console.log('error', error.message)\n        // setErrorMsg(error.message + \" Please install \" + data.name);\n        activate(connector)\n        // setIsLoading(false);\n        // setErrorPop(true);\n      }\n    })\n  }\n  useEffect(() => {\n    if (account && chainId) {\n      if (chainId !== ACTIVE_NETWORK) {\n        if (window.ethereum) {\n          swichNetworkHandler()\n        }\n      }\n    }\n  }, [chainId, account])\n  const swichNetworkHandler = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x' + ACTIVE_NETWORK.toString(16) }],\n      })\n    } catch (error) {\n      console.log('ERROR', error)\n\n      toast.warn(error.message)\n      // if (error.code === 4902) {\n      //   addNetworkHandler();\n      // }\n    }\n  }\n  useEffect(() => {\n    const userAddress = window.sessionStorage.getItem('userAddress')\n    if (userAddress) {\n      data.connectWallet()\n    }\n  }, []) //eslint-disable-line\n\n  useEffect(() => {\n    data.updateUser(account)\n  }, [account]) //eslint-disable-line\n\n  return (\n    <UserContext.Provider value={data}>{props.children}</UserContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}